#pragma once
//=====================================================================//
/*!	@file
	@brief	Fixed FIFO (first in first out) テンプレート @n
			Copyright 2016,2017 Kunihito Hiramatsu
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <cstdint>

namespace utils {

    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
    /*!
        @brief  fifo クラス
		@param[in]	T		基本形
		@param[in]	SIZE	バッファサイズ（最大６５５３６）
    */
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <class T, uint16_t SIZE>
	class fixed_fifo {

		volatile uint16_t	get_;
		volatile uint16_t	put_;

		T	buff_[SIZE];

	public:
        //-----------------------------------------------------------------//
        /*!
            @brief  コンストラクター
        */
        //-----------------------------------------------------------------//
		fixed_fifo() noexcept : get_(0), put_(0) { }


        //-----------------------------------------------------------------//
        /*!
            @brief  クリア
        */
        //-----------------------------------------------------------------//
		void clear() noexcept { get_ = put_ = 0; }


        //-----------------------------------------------------------------//
        /*!
            @brief  値の格納参照を得る
			@return 値の格納参照
        */
        //-----------------------------------------------------------------//
		inline T& put_at() noexcept { return buff_[put_]; }


        //-----------------------------------------------------------------//
        /*!
            @brief  値の格納ポイントの移動
        */
        //-----------------------------------------------------------------//
		inline void put_go() noexcept {
			volatile uint16_t put = put_;
			++put;
			if(put >= SIZE) {
				put = 0;
			}
			put_ = put;
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の格納
			@param[in]	v	値
        */
        //-----------------------------------------------------------------//
		void put(const T& v) noexcept {
			buff_[put_] = v;
			put_go();
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の取得参照を得る
			@return	値の取得参照
        */
        //-----------------------------------------------------------------//
		const T& get_at() noexcept { return buff_[get_]; }


        //-----------------------------------------------------------------//
        /*!
            @brief  値の取得
        */
        //-----------------------------------------------------------------//
		inline void get_go() noexcept {
			volatile uint16_t get = get_;
			++get;
			if(get >= SIZE) {
				get = 0;
			}
			get_ = get;
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の取得
			@return	値
        */
        //-----------------------------------------------------------------//
		T get() noexcept {
			T v = buff_[get_];
			get_go();
			return v;
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  長さを返す
			@return	長さ
        */
        //-----------------------------------------------------------------//
		uint16_t length() const noexcept {
			if(put_ >= get_) return (put_ - get_);
			else return (SIZE + put_ - get_);
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  get 位置を返す
			@return	位置
        */
        //-----------------------------------------------------------------//
		uint16_t pos_get() const noexcept { return get_; }


        //-----------------------------------------------------------------//
        /*!
            @brief  put 位置を返す
			@return	位置
        */
        //-----------------------------------------------------------------//
		uint16_t pos_put() const noexcept { return put_; }


        //-----------------------------------------------------------------//
        /*!
            @brief  バッファのサイズを返す
			@return	バッファのサイズ
        */
        //-----------------------------------------------------------------//
		uint16_t size() const noexcept { return SIZE; }
	};
}
