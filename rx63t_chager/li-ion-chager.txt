
RX63T(R5F563T6EDFM、RAM:8K、Flash:64K)マイコンを使ったリチウムイオン充電器（モバイルバッテリー）

はじめに：
リチウムイオン電池はエネルギー密度が高く、軽くて高性能な二次電池だ、しかし、正しく扱わないと、最悪発火したりして危険でもある。
通常、リチウムイオンの充電には専用ICを使う、セルの数、充電電流、など、多くの組み合わせに応じて色々なコントローラーが発売されている。
代表的なのは、USB電源（5V、500mA）からリチウムイオンセル１本を充電する事が出来るICだろうか。
また、一般的なモバイルバッテリーでは、多くのセルを並列接続して、容量を確保している構成が多いようだが、回路は簡単になるのだが、効率や運用面で考えた場合、数本を並列接続した方が有利だと思われる。
※3.7Vから昇圧して5Vを生成するような仕様では、効率を高くするのが降圧するより難しいと感じる。
今回、RX63T の PWM 機能とA/D変換機能を積極的に利用して、デジタルDC/DCコンバーターを製作して、リチウムイオン電池の充電、管理と、モバイル機器の充電用にUSBの5V出力を生成してみた。


最初にリチウムイオン充電器を製作しようと思った動機は、モバイルチャージャーを作ってみたかったからだ、ご存知のようにモバイルバッテリーチャージャーは、自分で作らなくても非常に多くが市販されており、価格もこなれている。
しかしながら、「自作」では自分の都合に合った仕様を完全に満足する事ができ、作る楽しみと、それを実際に活用する利便性がある。
翌々調べてみると、必要な容量のリチウムイオンセルを集めて、自分で作ると、大体市販価格の半分以下で作れるはずである。
今回、秋葉原やネットで入手出来る部品を使って、モバイルバッテリーを製作してみた、柔軟な構成に出来るように充電電流の制御に至るまで、ほぼ全てをRX63Tのソフトウェアーで制御している、また、外部の部品が少なくなるように考慮した。
全回路図、ソフトウェアーを公開するので、興味のある方は参考にするか自作にトライしてみては如何だろうか、完成すれなモバイルバッテリーとしても使えるので実用性もあると思う。
※ソフトウェアーは、全てC++で実装しており、デバイス依存のヘッダーファイルでさえ独自に実装している、gccを使ってコンパイルしているが、コンパイラーに依存しないように配慮している。

設計方針：
RX63Tを選んば理由として、日本製マイコンである事（筆者は、ARMも好きだが、日本人なので、日本製のマイコンに特段の愛着がある）、PWMが最大１００MHzで動作する事、価格が安く、入手性も良い事、gccが使える事などを上げる事が出来る。
特にPWMの周波数は重要で、96MHzで駆動して、分解能を９ビット確保しても、１８６KHｚ程度のPWM周波数を維持できる為、DC/DCコンバーター（スイッチング降圧電源）のLC回路を小型化出来る。
・ノートPCなどの１６V～１９V系のACアダプターを流用できる。
・１８６５０型リチウムイオンセル（保護回路無し）を複数利用
・同期整流式降圧コンバーターを使い効率を最適化する（発熱が少ない）
・USB用の５V出力最大１A程度
・内部状態をリアルタイムに確認できるように、充電モニターや、出力モニター表示を行う小型白黒液晶を付けた（今回はOLED１２８ｘ６４ピクセル、SPI接続）
・なるべく外付け部品を少なく簡素化する事で作りやすく、コストのかからない構成
・充電制御は、ソフトウェアーで行えるので、セルの本数など柔軟な構成を自分で組み替える事が出来る。
・太陽電池による充電や、パワーLEDのドライブなど、自分だけの構成が可能。


構成：
（１）制御マイコン
１００MHｚでPWMが駆動でき、１２ビットのA/Dコンバーターを内蔵する低価格で高性能なマイコンRX63Tを採用した。
※RAM：８Kバイト、フラッシュ：６４Kバイトの構成、６４ピンで、６００円程度で入手可能。
gccでC++でプログラミングが出来る。（筆者は、メーカーが提供している制限の付いたIDE環境が好きでは無い、今回のプロジェクトでは、バイナリーが６４K以内なので、無論、それを使う事も出来る。）
※gcc環境は自分でコンパイルして構築する事も出来るので、Linux、OS-X、Windowsなど環境を選ばない。
※このRXマイコンは、USBインターフェースを内臓していない為、Flashの書き込みは、シリアル通信で行う、その為、通信用シリアル入出力を出す必要がある。

（２）同期整流式降圧コンバーター
最近、同期整流式降圧コンバーターを構成するのに便利で安価なICが多数発売されている。
今回採用したのはIR社（インターナショナルレクチファイヤー社）の「IR2104」だ。
パワーMOS-FETも今回の構成に十分な電流を流せてON 抵抗が小さく高速動作が可能で入手性が良さそうな ローム社の「RSS100N03」を採用した。（最大定格、30V、10A）

（３）市販されているリチウムイオンセルを利用
安価な１８６５０サイズのリチウムイオンセルを複数組み合わせて、自分の欲しい容量を構成出来る。
最も高性能で品質が高いと思われるのはサンヨー（現在はパナソニック）製のセル（3.6V、2250ｍA/h）で、それでも１本６００円程度で入手出来る。
※６本使う事で、13500mA／3.6Vのモバイルバッテリーを構成出来る。
※３本のセルを直列にするので、バランス充電（各セルの電圧を個別に測定出来る）を行えるような構成にする。

（４）USB電源出力
モバイルバッテリーの目的としてUSB用電源出力を使って携帯や、スマートフォンなどを充電する事に使うので、５V出力を用意する。
出力電流はとりあえず、１．２Aまでをサポートする。
電流モニターを付けて、出力電流をモニターでき、設定電流を超えた場合にシャットダウンする機能など持たせる。
出力最大電流を設定できる。
この降圧コンバーターの構成は、充電回路とほぼ同じになっている。

（５）その他
降圧コンバーターは、電流を検出できるような回路を持たせているので、パワーLEDなどを定電流制御するにも都合が良い、パワーLED点灯用にも流用出来るようにしておく。（これはソフトウェアーの対応だけで実現可能）
大きな光量と長時間使える電灯としても利用出来る。
内部モニターとして小型の液晶画面を用意する、今回は１２８ｘ６４のドットマトリックスOLEDを使った、SPI制御タイプ。
リチウムイオン電池は、満充電で長時間放置すると消耗するようなので、８０％充電など、「いたわり」モードを設ける。
ソフトウェアーによって安全処置、操作性、利便性を追求する。
C++による解りやすく、柔軟なソフトウェアー
太陽電池セルを使って充電出来るような構成も視野に入れる。
専用基板の製作。

回路：
IR社は、NチャネルMOS-FETをドライブするのに都合が良い汎用ICを数多くラインアップしている、その中で、IR2104は、数アンペア程度のパワーMOS-FETをドライブするのに適する。
上段のドライブを行うのにboost回路を備える。
※boost回路では、FETがOFFのタイミングで、コンデンサに充電する事で、ON時の電圧を生成する為、PWMのdutyを１００％に出来ない。
パワーMOS-FETの選択ではON抵抗が小さく、入力容量が小さい高速タイプを選択する必要がある、（本来は、他にも検討する仕様は多くあるが、最初の目安はその二つだと思われる）最近は、非常に多くのメーカーがそれらの条件に適した製品を多くリリースしている、ローム社のRSS100N03もその一つで、定格３０V１０A、で高速な動作に適している、１０個で３００円で市販されていた。
下段のドライブ用と、オペアンプの電源用に１６Vのレギュレーターを備える。

９６MHｚ駆動のPWMでは、分解能を９ビット程度と考えると、１８６KHｚのPWM周波数となる（分解能を多くしたいが、周期が低くなる、逆にもっと周期を速くしたいが、分解能が８ビットなどでは分解能が荒すぎると考えて、９ビットとした）インダクターは、電源電圧、ピーク電流、リップル比などから、６８uHとした。

リチウムイオンセルが３本直列だと、１６Vを超えない（４本だと超えてしまう）と思うので、電源が最大１６VのレールtoレールCMOSオペアンプを採用した。（NJU7034）
マイコン用３．３V電源は、最大でも数十ミリアンペア程度しか流れないと思うが、効率優先でDC/DCモジュールで得ている。

A/Dコンバーターの分解能や、PWMの分解能は、最終的なリップルと大きな関係があると思うが、９ビットのPWMと１２ビットのA/Dの組み合わせなら、許容範囲の性能を確保できると思う。

ハイサイド側の電流検出用回路は、レールｔｏレールオペアンプでは良くある回路である、抵抗の誤差や、オペアンプの特性などで、あまり正確とは言えないが、今回の目的には十分と思われる。

大きな電流を扱うスイッチング回路では、回路に現れない部分として、電源ラインのインピーダンスなどの考察がある、ユニバーサル基板で試作する場合には、電源のスイッチングノイズを極力減らす工夫が必要と思う、この辺りは、経験的な部分も多いのだが、スイッチングレギュレーター専用ICのデータシートなどに、基板のパターンや部品配置などの情報を載せている事が多く、これらの手法を参考にする事が出来る。


ソフトウェアー：
筆者は、特別な理由が無い限り、C++で実装を行う、理由は、C言語より優れている点が格段に多く、より少ない時間で目的を達成できると思うからである。
また、メーカーがサンプルなどで提供しているI/Oの機能を網羅したヘッダーを一切使う事無く、独自のC++用定義を新たに実装して使っている、これには色々な理由がある、意見もあると思うが、利便性や実装のしやすさ、ソースコードの見やすさを追求した結果だ。

今回のソフトウェアーでは割り込みや、RX63Tの持っているリソースを利用してシングルタスクで動作している。電圧、電流の制御は、高速な応答が必要なので、タイマー起動の割り込み内で行うようにして、表示系をメイン処理で行っている。







------
コラム：
C++に関する間違った認識：
C++を組み込みマイコンで積極的に使う例は、日本では少ないように思う、それには色々な理由が考えられるが、最大の要因は、理解するのが難しいからだと思う。
C++ではCのプログラムもほぼそのままコンパイル出来てしまう為、C＋＋に馴染みの少ないC言語のプログラマーは、大体分かったつもりになっている事が多い（自分もそうだった）、また便利なCとしてC++の機能を少し使う事も拍車をかけている。
しかし、「C++はC言語とは全く違う言語である」この点に立たなければ、到底理解する事は出来ないのでは無いかとさえ思う。
また、正確な情報が少なく、間違った情報が散見され、正しい理解を阻害しており、学ぶ事が難しい言語であると思う。
経験的な観点で、C言語で数万行のプログラムを書けるような熟練者でも間違った理解をしている事が少なく無い。

以下に示したのは、間違って伝えられている重要項目だ。
・C++はC言語より動作が遅い。
全くの間違いで、「適切に実装された」コードは、最適化により、通常、C言語より高速に動作する。
・C++はリソースを多く消費する。
これも間違いで、同じ仕様を満足する実装では、CでもC++でもリソースの消費量は殆ど変わらない。

「適切に実装」されたが重要で、間違った不適切な実装では、全く逆の結論になる事もある。

最後によく考えてもらいたい事項がある、今回のような１００MHｚで動作する、高性能な３２ビットマイクロプロセッサー上で、より高性能で、安全で高機能なC++が使えるのに、わざわざCでプログラムする必要性はあるだろうか？
C++をある程度習得するとC言語より格段に正確で柔軟なコードを短い時間で実装出来るようになる。
問題だと思う事は、「C++の正しい習得には時間や労力がかかる点」、また、メーカーの提供するサンプルなどもまだまだCが中心で、整った形態で品質の高いC++のサンプルが少ない。（そもそも、品質が高いサンプルコードは少ない）
今回C++を使って組み込みマイコン用の実装を提供しているので、C++に興味ある人は是非、このようなアプローチを参考にしてもらいたいと願う。
